import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
	id 'java'
	id 'maven-publish'
	alias libs.plugins.quilt.loom
	alias libs.plugins.ploceus
	alias libs.plugins.shadow
}

loom {
	clientOnlyMinecraftJar()

	accessWidenerPath = file('src/main/resources/rgml.accesswidener')

	runs {
		client {
			client()
			name 'Minecraft Client'

			// Enable loader plugins, they're the backbone of this compat layer
			vmArg '-Dloader.experimental.allow_loading_plugins=true'
		}
	}

	mods {
		"rgml-quilt" {
			sourceSet sourceSets.main
		}
	}
}

ploceus {
	clientOnlyMappings()
}

sourceSets {
	main {
		java {
			srcDirs += 'src/main/risugami' // separating RGML code from the rest
		}
	}
}

tasks {
	classes {
		doLast {
			// delete unsafe class (it's only there because later java hates us)
			file('build/classes/java/main/sun').deleteDir()
		}
	}

	processResources {
		// Disable "up-to-date" status, because loom and/or gradle is dumb
		outputs.upToDateWhen { false }
	}
}

version = "${libs.versions.project.get()}+mc${libs.versions.minecraft.get()}"

configurations {
	shade {
		transitive = false
	}
}

dependencies {
	minecraft libs.minecraft

	mappings ploceus.featherMappings(libs.versions.ornithe.feather.get())
	exceptions ploceus.raven(libs.versions.ornithe.exceptions.get())
	signatures ploceus.sparrow(libs.versions.ornithe.signatures.get())
	nests ploceus.nests(libs.versions.ornithe.nests.get())

	modImplementation libs.quilt.loader

	implementation libs.log4j.api
	implementation libs.log4j.core

	implementation libs.bundles.mapping
	shade libs.bundles.mapping
	implementation libs.quilt.json
	shade libs.quilt.json

	include libs.log4j.api // needed to not crash from missing dependency
}

processResources {
	def props = [
	    theVersion: version
	]

	inputs.properties props
	filesMatching('quilt.mod.json5') {
		expand props
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
//	it.options.release = 8
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
//	sourceCompatibility = JavaVersion.VERSION_1_8
//	targetCompatibility = JavaVersion.VERSION_1_8

	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.remapJar {
	archiveClassifier = 'slim'
}

// replace shadowJar with one that doesn't depend on the main artifact
def remapShadowJar = tasks.register('remapShadowJar', ShadowJar) {
	configurations = [project.configurations.shade]
	archiveClassifier = ''
	relocate 'net.fabricmc.mappingio', 'org.duvetmc.mods.rgmlquilt.plugin.shade.mappingio'
	relocate 'net.fabricmc.tinyremapper', 'org.duvetmc.mods.rgmlquilt.plugin.shade.tinyremapper'
	relocate 'org.quiltmc.parsers.json', 'org.duvetmc.mods.rgmlquilt.plugin.shade.json5'
	from tasks.remapJar
}

tasks.build.dependsOn remapShadowJar

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
